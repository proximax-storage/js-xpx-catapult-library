/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.13
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressMetadataInfoDTO from '../model/AddressMetadataInfoDTO';
import MetadataIds from '../model/MetadataIds';
import MosaicMetadataInfoDTO from '../model/MosaicMetadataInfoDTO';
import NamespaceMetadataInfoDTO from '../model/NamespaceMetadataInfoDTO';

/**
* MetadataRoutes service.
* @module api/MetadataRoutesApi
* @version 1.0.13
*/
export default class MetadataRoutesApi {

    /**
    * Constructs a new MetadataRoutesApi. 
    * @alias module:api/MetadataRoutesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get metadata of account
     * Gets the metadata for a given accountId.
     * @param {String} accountId The account identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AddressMetadataInfoDTO} and HTTP response
     */
    getAccountMetadataWithHttpInfo(accountId) {
      let postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountMetadata");
      }


      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddressMetadataInfoDTO;

      return this.apiClient.callApi(
        '/account/{accountId}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get metadata of account
     * Gets the metadata for a given accountId.
     * @param {String} accountId The account identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AddressMetadataInfoDTO}
     */
    getAccountMetadata(accountId) {
      return this.getAccountMetadataWithHttpInfo(accountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get metadata of namespace/mosaic/account
     * Gets the metadata(AccountMetadataIndo, MosaicMetadataInfo or NamespaceMetadataInfo) for a given metadataId.
     * @param {String} metadataId The metadata identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NamespaceMetadataInfoDTO} and HTTP response
     */
    getMetadataWithHttpInfo(metadataId) {
      let postBody = null;

      // verify the required parameter 'metadataId' is set
      if (metadataId === undefined || metadataId === null) {
        throw new Error("Missing the required parameter 'metadataId' when calling getMetadata");
      }


      let pathParams = {
        'metadataId': metadataId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NamespaceMetadataInfoDTO;

      return this.apiClient.callApi(
        '/metadata/{metadataId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get metadata of namespace/mosaic/account
     * Gets the metadata(AccountMetadataIndo, MosaicMetadataInfo or NamespaceMetadataInfo) for a given metadataId.
     * @param {String} metadataId The metadata identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NamespaceMetadataInfoDTO}
     */
    getMetadata(metadataId) {
      return this.getMetadataWithHttpInfo(metadataId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get metadatas(namespace/mosaic/account) for an array of metadataids
     * Gets an array of metadata.
     * @param {module:model/MetadataIds} metadataIds An array of metadataIds.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AddressMetadataInfoDTO>} and HTTP response
     */
    getMetadatasWithHttpInfo(metadataIds) {
      let postBody = metadataIds;

      // verify the required parameter 'metadataIds' is set
      if (metadataIds === undefined || metadataIds === null) {
        throw new Error("Missing the required parameter 'metadataIds' when calling getMetadatas");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AddressMetadataInfoDTO];

      return this.apiClient.callApi(
        '/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get metadatas(namespace/mosaic/account) for an array of metadataids
     * Gets an array of metadata.
     * @param {module:model/MetadataIds} metadataIds An array of metadataIds.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AddressMetadataInfoDTO>}
     */
    getMetadatas(metadataIds) {
      return this.getMetadatasWithHttpInfo(metadataIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get metadata of mosaic
     * Gets the metadata for a given mosaicId.
     * @param {String} mosaicId The mosaic identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MosaicMetadataInfoDTO} and HTTP response
     */
    getMosaicMetadataWithHttpInfo(mosaicId) {
      let postBody = null;

      // verify the required parameter 'mosaicId' is set
      if (mosaicId === undefined || mosaicId === null) {
        throw new Error("Missing the required parameter 'mosaicId' when calling getMosaicMetadata");
      }


      let pathParams = {
        'mosaicId': mosaicId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MosaicMetadataInfoDTO;

      return this.apiClient.callApi(
        '/mosaic/{mosaicId}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get metadata of mosaic
     * Gets the metadata for a given mosaicId.
     * @param {String} mosaicId The mosaic identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MosaicMetadataInfoDTO}
     */
    getMosaicMetadata(mosaicId) {
      return this.getMosaicMetadataWithHttpInfo(mosaicId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get metadata of namespace
     * Gets the metadata for a given namespaceId.
     * @param {String} namespaceId The namespace identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NamespaceMetadataInfoDTO} and HTTP response
     */
    getNamespaceMetadataWithHttpInfo(namespaceId) {
      let postBody = null;

      // verify the required parameter 'namespaceId' is set
      if (namespaceId === undefined || namespaceId === null) {
        throw new Error("Missing the required parameter 'namespaceId' when calling getNamespaceMetadata");
      }


      let pathParams = {
        'namespaceId': namespaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NamespaceMetadataInfoDTO;

      return this.apiClient.callApi(
        '/namespace/{namespaceId}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get metadata of namespace
     * Gets the metadata for a given namespaceId.
     * @param {String} namespaceId The namespace identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NamespaceMetadataInfoDTO}
     */
    getNamespaceMetadata(namespaceId) {
      return this.getNamespaceMetadataWithHttpInfo(namespaceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
