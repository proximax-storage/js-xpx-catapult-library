{"version":3,"sources":["../../src/transactions/ModifyMetadataTransaction.js"],"names":["ModifyMetadataTransactionBufferPackage","Buffers","ModifyMetadataTransactionBuffer","MetadataModificationBuffer","require","flatbuffers","address","default","ModifyMetadataTransaction","Builder","fee","version","type","deadline","metadataType","metadataId","modifications","builder","modificationsSumSize","forEach","modificationKey","modification","key","convert","hexToUint8","utf8ToHex","modificationValue","value","valueSizeOffset","createValueSizeVector","length","keyOffset","createKeyVector","valueOffset","createValueVector","size","startMetadataModificationBuffer","addSize","addModificationType","addKeySize","addValueSize","addKey","addValue","push","endMetadataModificationBuffer","signatureVector","createSignatureVector","Array","map","Number","prototype","valueOf","signerVector","createSignerVector","deadlineVector","createDeadlineVector","feeVector","createMaxFeeVector","modificationsVector","createModificationsVector","metadataIdDecoded","stringToAddress","reverse","Error","metadataIdVector","createMetadataIdVector","startModifyMetadataTransactionBuffer","addSignature","addSigner","addVersion","addType","addMaxFee","addDeadline","addMetadataType","addMetadataId","addModifications","codedTransfer","endModifyMetadataTransactionBuffer","finish","bytes","asUint8Array","ModifyMetadataTransactionSchema","VerifiableTransaction"],"mappings":"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","file":"ModifyMetadataTransaction.js","sourcesContent":["// Copyright 2019 ProximaX Limited. All rights reserved.\n// Use of this source code is governed by the Apache 2.0\n// license that can be found in the LICENSE file\n\n/**\n * @module transactions/ModifyMetadataTransaction\n */\nimport VerifiableTransaction from './VerifiableTransaction';\nimport ModifyMetadataTransactionSchema from '../schema/ModifyMetadataTransactionSchema';\nimport ModifyMetadataTransactionBufferPackage from '../buffers/ModifyMetadataTransactionBuffer';\nimport convert from '../coders/convert';\n\nconst { ModifyMetadataTransactionBuffer, MetadataModificationBuffer } = ModifyMetadataTransactionBufferPackage.Buffers;\n\nconst { flatbuffers } = require('flatbuffers');\n\nconst address = require('../coders/address').default;\n\nexport default class ModifyMetadataTransaction extends VerifiableTransaction {\n\tstatic get Builder() {\n\t\tclass Builder {\n\t\t\tconstructor() {\n\t\t\t\tthis.fee = [0, 0];\n\t\t\t\tthis.version = 1;\n\t\t\t}\n\n\t\t\taddFee(fee) {\n\t\t\t\tthis.fee = fee;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddVersion(version) {\n\t\t\t\tthis.version = version;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddType(type) {\n\t\t\t\tthis.type = type;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddDeadline(deadline) {\n\t\t\t\tthis.deadline = deadline;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddMetadataType(metadataType) {\n\t\t\t\tthis.metadataType = metadataType;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddMetadataId(metadataId) {\n\t\t\t\tthis.metadataId = metadataId;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddModifications(modifications) {\n\t\t\t\tthis.modifications = modifications;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tbuild() {\n\t\t\t\tconst builder = new flatbuffers.Builder(1);\n\t\t\t\t// Constants\n\n\t\t\t\t// Create modifications\n\t\t\t\tconst modifications = [];\n\t\t\t\tlet modificationsSumSize = 0;\n\t\t\t\tthis.modifications.forEach(modification => {\n\t\t\t\t\tconst modificationKey = modification.key ? convert.hexToUint8(convert.utf8ToHex(modification.key)) : [];\n\t\t\t\t\tconst modificationValue = modification.value ? convert.hexToUint8(convert.utf8ToHex(modification.value)) : [];\n\t\t\t\t\t// check zero value size here (see go for details)\n\t\t\t\t\tconst valueSizeOffset = MetadataModificationBuffer.createValueSizeVector(builder, [modificationValue.length & 0xff, modificationValue.length & 0xff00]);\n\t\t\t\t\tconst keyOffset = MetadataModificationBuffer.createKeyVector(builder, modificationKey);\n\t\t\t\t\tconst valueOffset = MetadataModificationBuffer.createValueVector(builder, modificationValue);\n\t\t\t\t\tconst size = 4 + 1 + 1 + 2 + modificationKey.length + modificationValue.length\n\t\t\t\t\tmodificationsSumSize = modificationsSumSize + size;\n\t\t\t\t\tMetadataModificationBuffer.startMetadataModificationBuffer(builder);\n\t\t\t\t\tMetadataModificationBuffer.addSize(builder, size);\n\t\t\t\t\tMetadataModificationBuffer.addModificationType(builder, modification.type);\n\t\t\t\t\tMetadataModificationBuffer.addKeySize(builder, modificationKey.length);\n\t\t\t\t\tMetadataModificationBuffer.addValueSize(builder, valueSizeOffset);\n\t\t\t\t\tMetadataModificationBuffer.addKey(builder, keyOffset);\n\t\t\t\t\tMetadataModificationBuffer.addValue(builder, valueOffset);\n\t\t\t\t\tmodifications.push(MetadataModificationBuffer.endMetadataModificationBuffer(builder));\n\t\t\t\t});\n\n\t\t\t\t// Create vectors\n\t\t\t\tconst signatureVector = ModifyMetadataTransactionBuffer\n\t\t\t\t\t.createSignatureVector(builder, Array(...Array(64)).map(Number.prototype.valueOf, 0));\n\t\t\t\tconst signerVector = ModifyMetadataTransactionBuffer.createSignerVector(builder, Array(...Array(32)).map(Number.prototype.valueOf, 0));\n\t\t\t\tconst deadlineVector = ModifyMetadataTransactionBuffer.createDeadlineVector(builder, this.deadline);\n\t\t\t\tconst feeVector = ModifyMetadataTransactionBuffer.createMaxFeeVector(builder, this.fee);\n\t\t\t\tconst modificationsVector = ModifyMetadataTransactionBuffer.createModificationsVector(builder, modifications);\n\t\t\t\tlet metadataIdDecoded;\n\t\t\t\tif (this.metadataType === 1) {\n\t\t\t\t\tmetadataIdDecoded = address.stringToAddress(this.metadataId);\n\t\t\t\t} else if (this.metadataType === 2 || this.metadataType === 3) {\n\t\t\t\t\tmetadataIdDecoded = convert.hexToUint8(this.metadataId);\n\t\t\t\t\tmetadataIdDecoded.reverse();\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"Unhandled metadataType during ModifyMetadataTransaction serialization\");\n\t\t\t\t}\n\n\t\t\t\t// TODO: different types/lengths\n\t\t\t\tconst metadataIdVector = ModifyMetadataTransactionBuffer.createMetadataIdVector(builder, metadataIdDecoded);\n\t\t\t\tconst size = 120 + 1 + metadataIdDecoded.length + modificationsSumSize;\n\n\t\t\t\tModifyMetadataTransactionBuffer.startModifyMetadataTransactionBuffer(builder);\n\t\t\t\tModifyMetadataTransactionBuffer.addSize(builder, size);\n\t\t\t\tModifyMetadataTransactionBuffer.addSignature(builder, signatureVector);\n\t\t\t\tModifyMetadataTransactionBuffer.addSigner(builder, signerVector);\n\t\t\t\tModifyMetadataTransactionBuffer.addVersion(builder, this.version);\n\t\t\t\tModifyMetadataTransactionBuffer.addType(builder, this.type);\n\t\t\t\tModifyMetadataTransactionBuffer.addMaxFee(builder, feeVector);\n\t\t\t\tModifyMetadataTransactionBuffer.addDeadline(builder, deadlineVector);\n\t\t\t\tModifyMetadataTransactionBuffer.addMetadataType(builder, this.metadataType);\n\t\t\t\tModifyMetadataTransactionBuffer.addMetadataId(builder, metadataIdVector);\n\t\t\t\tModifyMetadataTransactionBuffer.addModifications(builder, modificationsVector);\n\n\t\t\t\t// Calculate size\n\n\t\t\t\tconst codedTransfer = ModifyMetadataTransactionBuffer.endModifyMetadataTransactionBuffer(builder);\n\t\t\t\tbuilder.finish(codedTransfer);\n\n\t\t\t\tconst bytes = builder.asUint8Array();\n\t\t\t\tif (bytes.length !== size) {\n\t\t\t\t\t//throw new Error(\"Declared size differs from actual bytes.length during ModifyMetadataTransaction serialization\")\n\t\t\t\t}\n\t\t\t\treturn new ModifyMetadataTransaction(bytes, ModifyMetadataTransactionSchema);\n\t\t\t}\n\t\t}\n\n\t\treturn Builder;\n\t}\n}\n"]}