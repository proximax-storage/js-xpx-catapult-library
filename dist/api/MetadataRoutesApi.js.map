{"version":3,"sources":["../../src/api/MetadataRoutesApi.js"],"names":["MetadataRoutesApi","apiClient","ApiClient","instance","accountId","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","AddressMetadataInfoDTO","callApi","getAccountMetadataWithHttpInfo","then","response_and_data","data","metadataId","NamespaceMetadataInfoDTO","getMetadataWithHttpInfo","metadataIds","getMetadatasWithHttpInfo","mosaicId","MosaicMetadataInfoDTO","getMosaicMetadataWithHttpInfo","namespaceId","getNamespaceMetadataWithHttpInfo"],"mappings":"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","file":"MetadataRoutesApi.js","sourcesContent":["/*\n * Copyright 2019 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Catapult REST API Reference\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.13\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport AddressMetadataInfoDTO from '../model/AddressMetadataInfoDTO';\nimport MetadataIds from '../model/MetadataIds';\nimport MosaicMetadataInfoDTO from '../model/MosaicMetadataInfoDTO';\nimport NamespaceMetadataInfoDTO from '../model/NamespaceMetadataInfoDTO';\n\n/**\n* MetadataRoutes service.\n* @module api/MetadataRoutesApi\n* @version 1.0.13\n*/\nexport default class MetadataRoutesApi {\n\n    /**\n    * Constructs a new MetadataRoutesApi. \n    * @alias module:api/MetadataRoutesApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Get metadata of account\n     * Gets the metadata for a given accountId.\n     * @param {String} accountId The account identifier.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AddressMetadataInfoDTO} and HTTP response\n     */\n    getAccountMetadataWithHttpInfo(accountId) {\n      let postBody = null;\n\n      // verify the required parameter 'accountId' is set\n      if (accountId === undefined || accountId === null) {\n        throw new Error(\"Missing the required parameter 'accountId' when calling getAccountMetadata\");\n      }\n\n\n      let pathParams = {\n        'accountId': accountId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = AddressMetadataInfoDTO;\n\n      return this.apiClient.callApi(\n        '/account/{accountId}/metadata', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get metadata of account\n     * Gets the metadata for a given accountId.\n     * @param {String} accountId The account identifier.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AddressMetadataInfoDTO}\n     */\n    getAccountMetadata(accountId) {\n      return this.getAccountMetadataWithHttpInfo(accountId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get metadata of namespace/mosaic/account\n     * Gets the metadata(AccountMetadataIndo, MosaicMetadataInfo or NamespaceMetadataInfo) for a given metadataId.\n     * @param {String} metadataId The metadata identifier.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NamespaceMetadataInfoDTO} and HTTP response\n     */\n    getMetadataWithHttpInfo(metadataId) {\n      let postBody = null;\n\n      // verify the required parameter 'metadataId' is set\n      if (metadataId === undefined || metadataId === null) {\n        throw new Error(\"Missing the required parameter 'metadataId' when calling getMetadata\");\n      }\n\n\n      let pathParams = {\n        'metadataId': metadataId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = NamespaceMetadataInfoDTO;\n\n      return this.apiClient.callApi(\n        '/metadata/{metadataId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get metadata of namespace/mosaic/account\n     * Gets the metadata(AccountMetadataIndo, MosaicMetadataInfo or NamespaceMetadataInfo) for a given metadataId.\n     * @param {String} metadataId The metadata identifier.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NamespaceMetadataInfoDTO}\n     */\n    getMetadata(metadataId) {\n      return this.getMetadataWithHttpInfo(metadataId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get metadatas(namespace/mosaic/account) for an array of metadataids\n     * Gets an array of metadata.\n     * @param {module:model/MetadataIds} metadataIds An array of metadataIds.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AddressMetadataInfoDTO>} and HTTP response\n     */\n    getMetadatasWithHttpInfo(metadataIds) {\n      let postBody = metadataIds;\n\n      // verify the required parameter 'metadataIds' is set\n      if (metadataIds === undefined || metadataIds === null) {\n        throw new Error(\"Missing the required parameter 'metadataIds' when calling getMetadatas\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [AddressMetadataInfoDTO];\n\n      return this.apiClient.callApi(\n        '/metadata', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get metadatas(namespace/mosaic/account) for an array of metadataids\n     * Gets an array of metadata.\n     * @param {module:model/MetadataIds} metadataIds An array of metadataIds.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AddressMetadataInfoDTO>}\n     */\n    getMetadatas(metadataIds) {\n      return this.getMetadatasWithHttpInfo(metadataIds)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get metadata of mosaic\n     * Gets the metadata for a given mosaicId.\n     * @param {String} mosaicId The mosaic identifier.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MosaicMetadataInfoDTO} and HTTP response\n     */\n    getMosaicMetadataWithHttpInfo(mosaicId) {\n      let postBody = null;\n\n      // verify the required parameter 'mosaicId' is set\n      if (mosaicId === undefined || mosaicId === null) {\n        throw new Error(\"Missing the required parameter 'mosaicId' when calling getMosaicMetadata\");\n      }\n\n\n      let pathParams = {\n        'mosaicId': mosaicId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = MosaicMetadataInfoDTO;\n\n      return this.apiClient.callApi(\n        '/mosaic/{mosaicId}/metadata', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get metadata of mosaic\n     * Gets the metadata for a given mosaicId.\n     * @param {String} mosaicId The mosaic identifier.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MosaicMetadataInfoDTO}\n     */\n    getMosaicMetadata(mosaicId) {\n      return this.getMosaicMetadataWithHttpInfo(mosaicId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get metadata of namespace\n     * Gets the metadata for a given namespaceId.\n     * @param {String} namespaceId The namespace identifier.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NamespaceMetadataInfoDTO} and HTTP response\n     */\n    getNamespaceMetadataWithHttpInfo(namespaceId) {\n      let postBody = null;\n\n      // verify the required parameter 'namespaceId' is set\n      if (namespaceId === undefined || namespaceId === null) {\n        throw new Error(\"Missing the required parameter 'namespaceId' when calling getNamespaceMetadata\");\n      }\n\n\n      let pathParams = {\n        'namespaceId': namespaceId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = NamespaceMetadataInfoDTO;\n\n      return this.apiClient.callApi(\n        '/namespace/{namespaceId}/metadata', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get metadata of namespace\n     * Gets the metadata for a given namespaceId.\n     * @param {String} namespaceId The namespace identifier.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NamespaceMetadataInfoDTO}\n     */\n    getNamespaceMetadata(namespaceId) {\n      return this.getNamespaceMetadataWithHttpInfo(namespaceId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"]}